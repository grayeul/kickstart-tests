#!/usr/bin/python3
#
# Copyright (C) 2022  Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# the GNU General Public License v.2, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY expressed or implied, including the implied warranties of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.  You should have received a copy of the
# GNU General Public License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the
# source code or documentation are not subject to the GNU General Public
# License and may only be used or replicated with the express permission of
# Red Hat, Inc.
#
# Red Hat Author(s): Radek Vykydal <rvykydal@redhat.com>

import argparse
import os
import sys
import re
from jinja2 import Template


def parse_args():
    _parser = argparse.ArgumentParser(description="Generate tplib testcases from kickstart tests")
    _parser.add_argument("kickstart_tests_dir", metavar="KSTESTS_DIR",
                         help="Directory with kickstart tests.")
    _parser.add_argument("--output-dir", "-o", type=str,
                         metavar="TEST_CASES_DIR",
                         help="Existing folder for generated test cases.")
    _parser.add_argument("--template", "-t", type=str, required=True,
                         metavar="TEST_CASE_TEMPLATE",
                         help="Template for a test case")
    return _parser.parse_args()


def get_tags_from_line(line):
    m = re.match(r'^\s*(TESTTYPE=)(.*)', line)
    if not m:
        return None
    _tt, tags = m.groups()
    m = re.match(r'.*(TESTTYPE:-)(.*)', tags)
    if m:
        _tt, tags = m.groups()
    tags = [tag.strip('"}') for tag in tags.split()]
    return tags


if __name__ == "__main__":

    args = parse_args()

    output_dir = args.output_dir
    if output_dir and not os.path.isdir(output_dir):
        sys.exit(f"Destination directory {output_dir} does not exist.")

    template_file = args.template
    with open(template_file, 'r') as f:
        template_tc = f.read()
    template = Template(template_tc, trim_blocks=True)

    kstests = []
    kstests_dir = args.kickstart_tests_dir
    for filename in os.listdir(kstests_dir):
        if not filename.endswith(".sh"):
            continue
        filepath = os.path.join(kstests_dir, filename)
        if not os.access(filepath, os.X_OK):
            print(f"{filename} is not executable, skipping.", file=sys.stderr)
            continue
        with open(filepath) as kstest_sh:
            for line in kstest_sh:
                tags = get_tags_from_line(line)
                if tags is not None:
                    break
            else:
                print(f"Tags in {filename} not found, skipping.", file=sys.stderr)
                continue
        kstests.append({
            "name": filename[:-3],
            "tags": tags,
        })

    for kstest in kstests:
        tc = template.render(kstest=kstest)
        header = f"# Generated by {sys.argv[0]} -t {args.template}"

        if output_dir:
            with open(os.path.join(output_dir, f"{kstest['name']}.tc.yaml"), "w") as f:
                f.write(header+"\n")
                f.write(tc)
        else:
            print("-"*60)
            print(header)
            print(tc)
